{"mappings":"ACCA,MAAM,EAAuB,AAAC,IAC5B,IAAI,EAAS,GACP,EAAQ,IAAI,WAAW,GACvB,EAAM,EAAM,UAAU,CAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,IACvB,GAAU,OAAO,YAAY,CAAC,CAAK,CAAC,EAAE,EAExC,OAAO,OAAO,IAAI,CAAC,EACrB,EAIM,EAAc,CAAC,EAAU,KAC7B,IAAM,EAAS,EAAqB,GAC9B,EAAU,SAAS,aAAa,CAAC,KACvC,EAAQ,YAAY,CAAC,OAAQ,+BAAiC,GAC9D,EAAQ,YAAY,CAAC,WAAY,GACjC,EAAQ,KAAK,CAAC,OAAO,CAAG,OACxB,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAQ,KAAK,GACb,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,EAsDM,EAAa,CAAC,EAAkB,IAC7B,IAAI,QAAQ,CAAC,EAAS,KAC3B,WAAW,KACT,EAAO,AAAI,MAAM,oBACnB,EAAG,KAEH,KAAK,OAAO,CAAC,CACX,OAAQ,AAAC,IACP,QAAQ,GAAG,CAAC,EACd,EACA,YAAa,EACb,aAAc,EACd,cAAe,EACf,SAAU,CAAC,EAAK,KAEV,EACF,EAAO,GACE,AAAgB,OAAhB,EACT,EAAO,AAAI,MAAM,0BAEjB,EAAQ,EAEZ,CACF,EACF,GAOI,EAAU,SAAS,cAAc,CAAC,WAUxC,AATa,SAAS,cAAc,CAAC,QAShC,gBAAgB,CAAC,SA7FE,AAAC,IACvB,GAAI,CAAC,OAAO,IAAI,EAAI,CAAC,OAAO,UAAU,EAAI,CAAC,OAAO,QAAQ,EAAI,CAAC,OAAO,IAAI,CAAE,CAC1E,MAAM,0DACN,MACF,CAGA,IAAM,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAE1D,GAAI,AAAoB,IAApB,EAAS,MAAM,CAAQ,CACzB,MAAM,oBACN,MACF,CAGA,IAAI,EAAiB,aAGf,EAAS,IAAI,UACnB,CAAA,EAAO,MAAM,CAAG,MAAO,IAErB,IAAM,EAAQ,IAAI,WADE,EAAE,MAAM,CAAC,MAAM,CAGnC,CAAA,EAAQ,SAAS,CAAG,iCAEpB,GAAI,CACF,IAAM,EAAuB,MAAM,EAAW,EAAO,EAGrD,CAAA,EAAQ,SAAS,CAAG,GAGpB,EAAY,CAAC,UAAU,EAAE,EAAe,CAAC,CAAE,EAC7C,CAAE,MAAO,EAAK,CACZ,EAAQ,SAAS,CAAG,iBACpB,MAAM,GACN,MACF,CACF,EAEI,AAA2B,IAA3B,EAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAExB,MAAM,iEACG,AAA4B,oBAA5B,EAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAChC,EAAiB,EAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CACxC,EAAO,iBAAiB,CAAC,EAAG,MAAM,CAAC,KAAK,CAAC,EAAE,GAE3C,MAAM,4CAEV,EA4CiD,CAAA","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\n// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nconst $35da740d59af89ba$var$_arrayBufferToBase64 = (buffer)=>{\n    let binary = \"\";\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for(let i = 0; i < len; i++)binary += String.fromCharCode(bytes[i]);\n    return window.btoa(binary);\n};\n// force browser download dialog\n// https://stackoverflow.com/questions/3665115/how-to-create-a-file-in-memory-for-user-to-download-but-not-through-server\nconst $35da740d59af89ba$var$downloadPDF = (filename, arrayBuffer)=>{\n    const base64 = $35da740d59af89ba$var$_arrayBufferToBase64(arrayBuffer);\n    const element = document.createElement(\"a\");\n    element.setAttribute(\"href\", \"data:application/pdf;base64,\" + base64);\n    element.setAttribute(\"download\", filename);\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n};\nconst $35da740d59af89ba$var$handleFileInput = (ev)=>{\n    if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {\n        alert(\"The File APIs are not fully supported in this browser.\");\n        return;\n    }\n    // get user password\n    const password = document.getElementById(\"password\").value;\n    if (password.length === 0) {\n        alert(\"Password missing\");\n        return;\n    }\n    // default output filename if error occurs, however output should be \"Encrypted original.pdf\"\n    let uploadFilename = \"output.pdf\";\n    // https://www.javascripture.com/FileReader\n    const reader = new FileReader();\n    reader.onload = async (e)=>{\n        const arrayBuffer = e.target.result;\n        const array = new Uint8Array(arrayBuffer);\n        $35da740d59af89ba$var$message.innerText = \"Processing now. Please wait...\";\n        try {\n            const encryptedArrayBuffer = await $35da740d59af89ba$var$encryptPDF(array, password);\n            // processing complete\n            $35da740d59af89ba$var$message.innerText = \"\";\n            // give user a download dialog\n            $35da740d59af89ba$var$downloadPDF(`Encrypted ${uploadFilename}`, encryptedArrayBuffer);\n        } catch (err) {\n            $35da740d59af89ba$var$message.innerText = \"Error occured.\";\n            alert(err);\n            return;\n        }\n    };\n    if (ev.target.files.length !== 1) // user uploaded too many files\n    alert(\"More than one file was selected. Please select one file only.\");\n    else if (ev.target.files[0].type === \"application/pdf\") {\n        uploadFilename = ev.target.files[0].name;\n        reader.readAsArrayBuffer(ev.target.files[0]);\n    } else alert(\"Selected file does not appear to be a PDF\");\n};\n// https://github.com/j3k0/qpdf.js\nconst $35da740d59af89ba$var$encryptPDF = (inputArrayBuffer, password)=>{\n    return new Promise((resolve, reject)=>{\n        setTimeout(()=>{\n            reject(new Error(\"Timeout exceeded\"));\n        }, 10000);\n        QPDF.encrypt({\n            logger: (text)=>{\n                console.log(text);\n            },\n            arrayBuffer: inputArrayBuffer,\n            userPassword: password,\n            ownerPassword: password,\n            callback: (err, arrayBuffer)=>{\n                // note: there isn't a way to cancel the processing\n                if (err) reject(err);\n                else if (arrayBuffer === null) reject(new Error(\"Unknown error occured\"));\n                else resolve(arrayBuffer);\n            }\n        });\n    });\n};\n//\n// SCRIPT STARTS HERE\n//\nconst $35da740d59af89ba$var$message = document.getElementById(\"message\");\nconst $35da740d59af89ba$var$form = document.getElementById(\"file\");\nif (null) {\n    null.dispose(()=>{\n        $35da740d59af89ba$var$form.removeEventListener(\"change\", $35da740d59af89ba$var$handleFileInput);\n    });\n    null.accept();\n}\n$35da740d59af89ba$var$form.addEventListener(\"change\", $35da740d59af89ba$var$handleFileInput, false);\n\n\n//# sourceMappingURL=index.453862ae.js.map\n","// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\r\nconst _arrayBufferToBase64 = (buffer) => {\r\n  let binary = \"\";\r\n  const bytes = new Uint8Array(buffer);\r\n  const len = bytes.byteLength;\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n  return window.btoa(binary);\r\n};\r\n\r\n// force browser download dialog\r\n// https://stackoverflow.com/questions/3665115/how-to-create-a-file-in-memory-for-user-to-download-but-not-through-server\r\nconst downloadPDF = (filename, arrayBuffer) => {\r\n  const base64 = _arrayBufferToBase64(arrayBuffer);\r\n  const element = document.createElement(\"a\");\r\n  element.setAttribute(\"href\", \"data:application/pdf;base64,\" + base64);\r\n  element.setAttribute(\"download\", filename);\r\n  element.style.display = \"none\";\r\n  document.body.appendChild(element);\r\n  element.click();\r\n  document.body.removeChild(element);\r\n};\r\n\r\nconst handleFileInput = (ev) => {\r\n  if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {\r\n    alert(\"The File APIs are not fully supported in this browser.\");\r\n    return;\r\n  }\r\n\r\n  // get user password\r\n  const password = document.getElementById(\"password\").value;\r\n\r\n  if (password.length === 0) {\r\n    alert(\"Password missing\");\r\n    return;\r\n  }\r\n\r\n  // default output filename if error occurs, however output should be \"Encrypted original.pdf\"\r\n  let uploadFilename = \"output.pdf\";\r\n\r\n  // https://www.javascripture.com/FileReader\r\n  const reader = new FileReader();\r\n  reader.onload = async (e) => {\r\n    const arrayBuffer = e.target.result;\r\n    const array = new Uint8Array(arrayBuffer);\r\n\r\n    message.innerText = \"Processing now. Please wait...\";\r\n\r\n    try {\r\n      const encryptedArrayBuffer = await encryptPDF(array, password);\r\n\r\n      // processing complete\r\n      message.innerText = \"\";\r\n\r\n      // give user a download dialog\r\n      downloadPDF(`Encrypted ${uploadFilename}`, encryptedArrayBuffer);\r\n    } catch (err) {\r\n      message.innerText = \"Error occured.\";\r\n      alert(err);\r\n      return;\r\n    }\r\n  };\r\n\r\n  if (ev.target.files.length !== 1) {\r\n    // user uploaded too many files\r\n    alert(\"More than one file was selected. Please select one file only.\");\r\n  } else if (ev.target.files[0].type === \"application/pdf\") {\r\n    uploadFilename = ev.target.files[0].name;\r\n    reader.readAsArrayBuffer(ev.target.files[0]);\r\n  } else {\r\n    alert(\"Selected file does not appear to be a PDF\");\r\n  }\r\n};\r\n\r\n// https://github.com/j3k0/qpdf.js\r\nconst encryptPDF = (inputArrayBuffer, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      reject(new Error(\"Timeout exceeded\"));\r\n    }, 10000);\r\n\r\n    QPDF.encrypt({\r\n      logger: (text) => {\r\n        console.log(text);\r\n      },\r\n      arrayBuffer: inputArrayBuffer,\r\n      userPassword: password,\r\n      ownerPassword: password,\r\n      callback: (err, arrayBuffer) => {\r\n        // note: there isn't a way to cancel the processing\r\n        if (err) {\r\n          reject(err);\r\n        } else if (arrayBuffer === null) {\r\n          reject(new Error(\"Unknown error occured\"));\r\n        } else {\r\n          resolve(arrayBuffer);\r\n        }\r\n      },\r\n    });\r\n  });\r\n};\r\n\r\n//\r\n// SCRIPT STARTS HERE\r\n//\r\n\r\nconst message = document.getElementById(\"message\");\r\nconst form = document.getElementById(\"file\");\r\n\r\nif (module.hot) {\r\n  module.hot.dispose(() => {\r\n    form.removeEventListener(\"change\", handleFileInput);\r\n  });\r\n  module.hot.accept();\r\n}\r\n\r\nform.addEventListener(\"change\", handleFileInput, false);\r\n"],"names":["$35da740d59af89ba$var$_arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","$35da740d59af89ba$var$downloadPDF","filename","arrayBuffer","base64","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","$35da740d59af89ba$var$encryptPDF","inputArrayBuffer","password","Promise","resolve","reject","setTimeout","Error","QPDF","encrypt","logger","text","console","log","userPassword","ownerPassword","callback","err","$35da740d59af89ba$var$message","getElementById","$35da740d59af89ba$var$form","addEventListener","ev","File","FileReader","FileList","Blob","alert","value","length","uploadFilename","reader","onload","e","array","target","result","innerText","encryptedArrayBuffer","files","type","name","readAsArrayBuffer"],"version":3,"file":"index.453862ae.js.map"}